import os
import glob
from pathlib import Path
import tkinter as tk
from tkinter import messagebox

# Th·ª≠ import xlwings ƒë·ªÉ t∆∞∆°ng t√°c tr·ª±c ti·∫øp v·ªõi Excel
try:
    import xlwings as xw
    XLWINGS_AVAILABLE = True
except ImportError:
    XLWINGS_AVAILABLE = False
    # Fallback to openpyxl
    import openpyxl
    from openpyxl.utils import get_column_letter
    from openpyxl.worksheet.views import SheetView, Selection


def find_screen_folders(screen_list, base_folder):
    """
    T√¨m c√°c folder t∆∞∆°ng ·ª©ng v·ªõi danh s√°ch m√†n h√¨nh
    
    Args:
        screen_list (list): Danh s√°ch t√™n m√†n h√¨nh
        base_folder (str): ƒê∆∞·ªùng d·∫´n folder t·ªïng
        
    Returns:
        dict: Dictionary mapping screen name to folder path
    """
    found_folders = {}
    
    if not os.path.exists(base_folder):
        return found_folders
    
    # L·∫•y t·∫•t c·∫£ folder con
    for item in os.listdir(base_folder):
        item_path = os.path.join(base_folder, item)
        if os.path.isdir(item_path):
            # Ki·ªÉm tra xem folder c√≥ match v·ªõi screen n√†o kh√¥ng
            for screen in screen_list:
                screen_clean = screen.strip()
                if screen_clean and (screen_clean.lower() in item.lower() or item.lower() in screen_clean.lower()):
                    found_folders[screen_clean] = item_path
                    break
    
    return found_folders


def format_excel_file_xlwings(file_path, output_callback=None):
    """
    Format Excel file using xlwings (preserves linked objects)
    """
    try:
        if output_callback:
            output_callback(f"üìù ƒêang x·ª≠ l√Ω v·ªõi xlwings: {os.path.basename(file_path)}")
        
        # M·ªü Excel application (·∫©n)
        app = xw.App(visible=False, add_book=False)
        
        try:
            # M·ªü workbook
            wb = app.books.open(file_path)
            
            # Format t·∫•t c·∫£ worksheet
            for i, sheet in enumerate(wb.sheets):
                try:
                    # Activate sheet
                    sheet.activate()
                    
                    # 1. Ch·ªçn cell A1
                    sheet.range('A1').select()
                    
                    # 2. ƒê·∫∑t zoom 100% - s·ª≠ d·ª•ng COM API tr·ª±c ti·∫øp
                    try:
                        # L·∫•y window hi·ªán t·∫°i
                        xl_app = app.api
                        active_window = xl_app.ActiveWindow
                        
                        # Set zoom
                        active_window.Zoom = 100
                        
                        # Set scroll position
                        active_window.ScrollRow = 1
                        active_window.ScrollColumn = 1
                        
                    except Exception as com_error:
                        if output_callback:
                            output_callback(f"    ‚ö†Ô∏è COM API l·ªói: {str(com_error)}")
                    
                    if output_callback:
                        output_callback(f"  ‚úÖ Sheet '{sheet.name}': A1, Zoom 100%, Scroll Top-Left")
                        
                except Exception as sheet_error:
                    if output_callback:
                        output_callback(f"  ‚ö†Ô∏è Sheet '{sheet.name}': L·ªói {str(sheet_error)}")
            
            # ƒê·∫∑t sheet ƒë·∫ßu ti√™n l√†m active cu·ªëi c√πng
            if wb.sheets:
                wb.sheets[0].activate()
                wb.sheets[0].range('A1').select()
                if output_callback:
                    output_callback(f"  üéØ ƒê·∫∑t sheet '{wb.sheets[0].name}' l√†m active")
            
            # L∆∞u v√† ƒë√≥ng
            wb.save()
            wb.close()
            
        finally:
            # ƒê√≥ng Excel application
            app.quit()
        
        if output_callback:
            output_callback(f"‚úÖ Ho√†n th√†nh (xlwings): {os.path.basename(file_path)}\n")
        
        return True
        
    except Exception as e:
        if output_callback:
            output_callback(f"‚ùå L·ªói xlwings {os.path.basename(file_path)}: {str(e)}\n")
        return False


def format_excel_file(file_path, output_callback=None, force_format=False):
    """
    Format Excel file - t·ª± ƒë·ªông ch·ªçn ph∆∞∆°ng th·ª©c t·ªët nh·∫•t
    """
    if XLWINGS_AVAILABLE:
        # ∆Øu ti√™n xlwings v√¨ b·∫£o v·ªá linked objects t·ªët h∆°n
        return format_excel_file_xlwings(file_path, output_callback)
    else:
        # Fallback to openpyxl
        return format_excel_file_openpyxl(file_path, output_callback, force_format)


def format_excel_file_openpyxl(file_path, output_callback=None, force_format=False):
    """
    Format Excel file using openpyxl (fallback method)
    
    Args:
        file_path (str): ƒê∆∞·ªùng d·∫´n file Excel
        output_callback (function): Callback ƒë·ªÉ hi·ªÉn th·ªã log
        force_format (bool): C√≥ √©p bu·ªôc format ngay c·∫£ khi c√≥ objects kh√¥ng
        
    Returns:
        bool: True n·∫øu th√†nh c√¥ng, False n·∫øu c√≥ l·ªói
    """
    try:
        if output_callback:
            output_callback(f"üìù ƒêang x·ª≠ l√Ω: {os.path.basename(file_path)}")
        
        # M·ªü workbook ƒë·ªÉ ki·ªÉm tra
        workbook = openpyxl.load_workbook(file_path)
        
        # Ki·ªÉm tra xem file c√≥ ch·ª©a objects/images kh√¥ng
        has_objects = False
        object_count = 0
        
        for sheet in workbook.worksheets:
            if hasattr(sheet, '_images') and sheet._images:
                has_objects = True
                object_count += len(sheet._images)
            if hasattr(sheet, '_charts') and sheet._charts:
                has_objects = True
                object_count += len(sheet._charts)
        
        if has_objects and not force_format:
            if output_callback:
                output_callback(f"  ‚ö†Ô∏è PH√ÅT HI·ªÜN {object_count} objects/images trong file")
                output_callback(f"  üõ°Ô∏è ƒê·ªÉ b·∫£o v·ªá linked objects, tool s·∫Ω B·ªé QUA file n√†y")
                output_callback(f"  üí° B·∫≠t 'Force Format' n·∫øu mu·ªën x·ª≠ l√Ω d√π c√≥ r·ªßi ro")
            
            workbook.close()
            return True  # B·ªè qua nh∆∞ng kh√¥ng b√°o l·ªói
        
        elif has_objects and force_format:
            if output_callback:
                output_callback(f"  ‚ö†Ô∏è PH√ÅT HI·ªÜN {object_count} objects/images - NH∆ØNG V·∫™N X·ª¨ L√ù")
                output_callback(f"  üö® C·∫¢NH B√ÅO: Linked objects c√≥ th·ªÉ b·ªã m·∫•t!")
        
        # Ti·∫øn h√†nh format (c√≥ ho·∫∑c kh√¥ng c√≥ objects t√πy theo force_format)
        try:
            # 1. Format t·∫•t c·∫£ sheet
            for sheet_name in workbook.sheetnames:
                worksheet = workbook[sheet_name]
                
                try:
                    # T·∫°o sheet_view n·∫øu c·∫ßn
                    if not hasattr(worksheet, 'sheet_view') or worksheet.sheet_view is None:
                        worksheet.sheet_view = SheetView()
                    
                    # Format view properties
                    worksheet.sheet_view.zoomScale = 100
                    selection = Selection(activeCell='A1', sqref='A1')
                    worksheet.sheet_view.selection = [selection]
                    worksheet.sheet_view.topLeftCell = 'A1'
                    
                    if output_callback:
                        output_callback(f"  ‚úÖ Sheet '{sheet_name}': A1, Zoom 100%, Scroll Top-Left")
                        
                except Exception as sheet_error:
                    if output_callback:
                        output_callback(f"  ‚ö†Ô∏è Sheet '{sheet_name}': L·ªói {str(sheet_error)}")
            
            # 2. ƒê·∫∑t sheet ƒë·∫ßu ti√™n l√†m active
            if workbook.sheetnames:
                first_sheet_name = workbook.sheetnames[0]
                workbook.active = workbook[first_sheet_name]
                
                if output_callback:
                    output_callback(f"  üéØ ƒê·∫∑t sheet '{first_sheet_name}' l√†m active")
            
            # 3. L∆∞u file
            workbook.save(file_path)
            workbook.close()
            
        except Exception as e:
            workbook.close()
            raise e
        
        if output_callback:
            output_callback(f"‚úÖ Ho√†n th√†nh: {os.path.basename(file_path)}\n")
        
        return True
        
    except Exception as e:
        if output_callback:
            output_callback(f"‚ùå L·ªói x·ª≠ l√Ω {os.path.basename(file_path)}: {str(e)}\n")
        return False


def process_screen_folders(screen_list, base_folder, output_callback=None, force_format=False):
    """
    X·ª≠ l√Ω format Excel cho danh s√°ch m√†n h√¨nh
    
    Args:
        screen_list (list): Danh s√°ch t√™n m√†n h√¨nh
        base_folder (str): ƒê∆∞·ªùng d·∫´n folder t·ªïng
        output_callback (function): Callback ƒë·ªÉ hi·ªÉn th·ªã log
        force_format (bool): C√≥ √©p bu·ªôc format ngay c·∫£ khi c√≥ objects kh√¥ng
        
    Returns:
        dict: K·∫øt qu·∫£ x·ª≠ l√Ω {screen: {success_count, error_count, files}}
    """
    results = {}
    
    if output_callback:
        output_callback("üîç B·∫Øt ƒë·∫ßu t√¨m ki·∫øm folder m√†n h√¨nh...\n")
    
    # T√¨m folder t∆∞∆°ng ·ª©ng
    found_folders = find_screen_folders(screen_list, base_folder)
    
    if not found_folders:
        if output_callback:
            output_callback("‚ùå Kh√¥ng t√¨m th·∫•y folder n√†o ph√π h·ª£p!\n")
        return results
    
    if output_callback:
        output_callback(f"‚úÖ T√¨m th·∫•y {len(found_folders)} folder:\n")
        for screen, folder_path in found_folders.items():
            output_callback(f"  üìÅ {screen} ‚Üí {folder_path}\n")
        output_callback("\n")
    
    # X·ª≠ l√Ω t·ª´ng folder
    for screen_name, folder_path in found_folders.items():
        if output_callback:
            output_callback(f"üìÇ X·ª≠ l√Ω folder: {screen_name}\n")
        
        # T√¨m t·∫•t c·∫£ file Excel trong folder (bao g·ªìm c·∫£ subfolder)
        excel_files = []
        for ext in ['*.xlsx', '*.xls']:
            # S·ª≠ d·ª•ng recursive=True ƒë·ªÉ t√¨m trong t·∫•t c·∫£ subfolder
            found_files = glob.glob(os.path.join(folder_path, '**', ext), recursive=True)
            excel_files.extend(found_files)
        
        # Lo·∫°i b·ªè file tr√πng l·∫∑p b·∫±ng c√°ch chuy·ªÉn th√†nh set r·ªìi v·ªÅ list
        excel_files = list(set(excel_files))
        
        success_count = 0
        error_count = 0
        processed_files = []
        
        if not excel_files:
            if output_callback:
                output_callback(f"  ‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y file Excel n√†o trong {screen_name}\n")
        else:
            if output_callback:
                output_callback(f"  üìä T√¨m th·∫•y {len(excel_files)} file Excel\n")
                # Debug: hi·ªÉn th·ªã danh s√°ch file t√¨m ƒë∆∞·ª£c
                for i, file_path in enumerate(excel_files, 1):
                    file_name = os.path.basename(file_path)
                    output_callback(f"    {i}. {file_name}\n")
            
            for excel_file in excel_files:
                # B·ªè qua file t·∫°m c·ªßa Excel (b·∫Øt ƒë·∫ßu v·ªõi ~$)
                if os.path.basename(excel_file).startswith('~$'):
                    continue
                
                if format_excel_file(excel_file, output_callback, force_format):
                    success_count += 1
                else:
                    error_count += 1
                
                processed_files.append(excel_file)
        
        results[screen_name] = {
            'success_count': success_count,
            'error_count': error_count,
            'files': processed_files,
            'folder_path': folder_path
        }
        
        if output_callback:
            output_callback(f"üìä K·∫øt qu·∫£ {screen_name}: {success_count} th√†nh c√¥ng, {error_count} l·ªói\n")
            output_callback("-" * 50 + "\n")
    
    return results


def validate_inputs(screen_text, base_folder):
    """
    Validate input t·ª´ user
    
    Args:
        screen_text (str): Text ch·ª©a danh s√°ch m√†n h√¨nh
        base_folder (str): ƒê∆∞·ªùng d·∫´n folder t·ªïng
        
    Returns:
        tuple: (is_valid, error_message, screen_list)
    """
    # Ki·ªÉm tra folder t·ªïng
    if not base_folder or not base_folder.strip():
        return False, "Vui l√≤ng ch·ªçn folder t·ªïng!", []
    
    if not os.path.exists(base_folder):
        return False, f"Folder kh√¥ng t·ªìn t·∫°i: {base_folder}", []
    
    if not os.path.isdir(base_folder):
        return False, f"ƒê∆∞·ªùng d·∫´n kh√¥ng ph·∫£i l√† folder: {base_folder}", []
    
    # Ki·ªÉm tra danh s√°ch m√†n h√¨nh
    if not screen_text or not screen_text.strip():
        return False, "Vui l√≤ng nh·∫≠p danh s√°ch m√†n h√¨nh!", []
    
    # Parse danh s√°ch m√†n h√¨nh (t√°ch theo d√≤ng ho·∫∑c d·∫•u ph·∫©y)
    screen_list = []
    lines = screen_text.strip().split('\n')
    for line in lines:
        # T√°ch theo d·∫•u ph·∫©y n·∫øu c√≥
        if ',' in line:
            screens = [s.strip() for s in line.split(',') if s.strip()]
            screen_list.extend(screens)
        else:
            screen = line.strip()
            if screen:
                screen_list.append(screen)
    
    if not screen_list:
        return False, "Danh s√°ch m√†n h√¨nh tr·ªëng!", []
    
    return True, "", screen_list
