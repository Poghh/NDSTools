import os
import re
import subprocess
from tkinter import messagebox

from toolsAction.beActions.db_config import DB_CONFIG

# --- ƒê∆∞·ªùng d·∫´n th∆∞ m·ª•c ---
WORKSPACE_PATH = "/workspace"
SQL_SCRIPT_PATH = os.path.join(WORKSPACE_PATH, "setup/sql_script")
DB_FOLDER_PATH = os.path.join(WORKSPACE_PATH, "db")

# --- Danh s√°ch l·ªánh shell kh·ªüi t·∫°o ---
INIT_COMMANDS = [
    "sh setup/sql_script/db_initialization.sh",
    "sh setup/sql_script/db_initialization_cphn.sh",
    "sh setup/sql_script/db_initialization_cnf.sh",
]


def run_database_initialization(self):
    """H√†m ch√≠nh ƒë·ªÉ g·ªçi t·ª´ GUI - self l√† class BackEndTab"""
    confirm = messagebox.askyesno("X√°c nh·∫≠n", "B·∫°n c√≥ ch·∫Øc mu·ªën kh·ªüi t·∫°o l·∫°i c∆° s·ªü d·ªØ li·ªáu?")
    if not confirm:
        return

    _log(self, "üöÄ B·∫Øt ƒë·∫ßu kh·ªüi t·∫°o c∆° s·ªü d·ªØ li·ªáu...\n")

    try:
        run_shell_scripts(lambda msg: _log(self, msg))
        latest_sql_file = find_latest_dump_file()
        run_sql_dump_with_cli(latest_sql_file, lambda msg: _log(self, msg))
        run_additional_sql_commands(lambda msg: _log(self, msg))
        _log(self, "üéâ Kh·ªüi t·∫°o DB ho√†n t·∫•t!\n")
    except Exception as e:
        _log(self, f"‚ùå ƒê√£ x·∫£y ra l·ªói: {str(e)}\n")


def _log(self, msg):
    self.output_text.insert("end", msg + "\n")
    self.output_text.see("end")
    self.tab.update()


def run_shell_scripts(output_callback=print):
    """Ch·∫°y c√°c script shell kh·ªüi t·∫°o DB."""
    os.chdir(WORKSPACE_PATH)
    for cmd in INIT_COMMANDS:
        output_callback(f"‚ñ∂ ƒêang ch·∫°y: {cmd}")
        result = subprocess.run(
            cmd,
            shell=True,
            check=True,
            capture_output=True,
            text=True,
        )
        output_callback(f"‚úî Th√†nh c√¥ng:\n{result.stdout}")


def find_latest_dump_file():
    """T√¨m file Dump*.sql m·ªõi nh·∫•t trong c√πng th∆∞ m·ª•c v·ªõi script n√†y."""
    current_dir = os.path.dirname(os.path.abspath(__file__))
    dump_files = [f for f in os.listdir(current_dir) if re.match(r"Dump\d+\.sql$", f)]

    if not dump_files:
        raise FileNotFoundError(
            "‚ùå Kh√¥ng t√¨m th·∫•y file dump n√†o c√≥ d·∫°ng Dump*.sql trong th∆∞ m·ª•c hi·ªán t·∫°i."
        )

    latest_file = sorted(dump_files)[-1]
    return os.path.join(current_dir, latest_file)


def run_sql_dump_with_cli(dump_file_path, output_callback=print):
    """Ch·∫°y file dump b·∫±ng mysql CLI."""
    mysql_cmd = (
        f"mysql -h {DB_CONFIG['host']} "
        f"-P {DB_CONFIG['port']} "
        f"-u {DB_CONFIG['user']} "
        f"-p{DB_CONFIG['password']} "
        f'{DB_CONFIG["database"]} < "{dump_file_path}"'
    )
    output_callback(f"‚ñ∂ ƒêang ch·∫°y dump file b·∫±ng mysql CLI: {dump_file_path}")
    result = subprocess.run(mysql_cmd, shell=True, capture_output=True, text=True)

    if result.returncode != 0:
        raise RuntimeError(f"‚ùå L·ªói khi ch·∫°y dump file:\n{result.stderr}")

    output_callback("‚úÖ Dump file ch·∫°y th√†nh c√¥ng.")


def run_additional_sql_commands(output_callback=print):
    """Ch·∫°y c√°c l·ªánh SQL b·ªï sung theo y√™u c·∫ßu."""
    output_callback("‚ñ∂ ƒêang x·ª≠ l√Ω b∆∞·ªõc ch·∫°y l·ªánh SQL b·ªï sung trong th∆∞ m·ª•c /workspace/db ...")

    if not os.path.isdir(DB_FOLDER_PATH):
        raise FileNotFoundError("‚ùå Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c /workspace/db")

    # 1. SET GLOBAL sql_mode
    sql_mode_cmd = (
        f"mysql -h {DB_CONFIG['host']} -P {DB_CONFIG['port']} -u root -ppass! "
        f"-D {DB_CONFIG['database']} "
        f"-e \"SET GLOBAL sql_mode = (SELECT IF(LOCATE('NO_AUTO_VALUE_ON_ZERO', @@global.sql_mode) = 0, CONCAT(@@global.sql_mode, ',NO_AUTO_VALUE_ON_ZERO'), @@global.sql_mode));\""
    )
    subprocess.run(sql_mode_cmd, shell=True, check=True)
    output_callback("‚úî ƒê√£ c·∫≠p nh·∫≠t sql_mode")

    # 2. Import ddl_all.sql
    ddl_path = os.path.join(DB_FOLDER_PATH, "ddl_all.sql")
    if not os.path.isfile(ddl_path):
        raise FileNotFoundError("‚ùå Kh√¥ng t√¨m th·∫•y ddl_all.sql")

    ddl_cmd = (
        f"mysql -h {DB_CONFIG['host']} -P {DB_CONFIG['port']} -u root -ppass! "
        f'-D {DB_CONFIG["database"]} < "{ddl_path}"'
    )
    subprocess.run(ddl_cmd, shell=True, check=True)
    output_callback("‚úî ƒê√£ import ddl_all.sql")

    # 3. Import dml_all.sql
    dml_path = os.path.join(DB_FOLDER_PATH, "dml_all.sql")
    if not os.path.isfile(dml_path):
        raise FileNotFoundError("‚ùå Kh√¥ng t√¨m th·∫•y dml_all.sql")

    dml_cmd = (
        f"mysql -h {DB_CONFIG['host']} -P {DB_CONFIG['port']} -u devuser -pdevuser "
        f'-D {DB_CONFIG["database"]} < "{dml_path}"'
    )
    subprocess.run(dml_cmd, shell=True, check=True)
    output_callback("‚úî ƒê√£ import dml_all.sql")
